// ======================================–ú–û–î–£–õ–¨ 4.1============================================================
// // –ö–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—è
// function greet(name) {
//   console.log(`–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ ${name}.`);
// }

// // –§—É–Ω–∫—Ü—ñ—è –≤–∏—â–æ–≥–æ –ø–æ—Ä—è–¥–∫—É
// function registerGuest(name, callback) {
//   console.log(`–†–µ—î—Å—Ç—Ä—É—î–º–æ –≥–æ—Å—Ç—è ${name}.`);
//   callback(name);
// }

// registerGuest("–ú–∞–Ω–≥–æ", greet);

// function registerGuest(name, callback) {
//   console.log(`–†–µ—î—Å—Ç—Ä—É—î–º–æ –≥–æ—Å—Ç—è ${name}.`);
//   callback(name);
// }

// // –ü–µ—Ä–µ–¥–∞—î–º–æ —ñ–Ω–ª–∞–π–Ω —Ñ—É–Ω–∫—Ü—ñ—é greet —É —è–∫–æ—Å—Ç—ñ –∫–æ–ª–±–µ–∫–∞
// registerGuest("–ú–∞–Ω–≥–æ", function greet(name) {
//   console.log(`–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ ${name}.`);
// });

// // –ü–µ—Ä–µ–¥–∞—î–º–æ —ñ–Ω–ª–∞–π–Ω —Ñ—É–Ω–∫—Ü—ñ—é notify —É —è–∫–æ—Å—Ç—ñ –∫–æ–ª–±–µ–∫–∞
// registerGuest("–ü–æ–ª—ñ", function notify(name) {
//   console.log(`–®–∞–Ω–æ–≤–Ω–∏–π(–∞) ${name}, –≤–∞—à –Ω–æ–º–µ—Ä –±—É–¥–µ –≥–æ—Ç–æ–≤–∏–π –∑–∞ 30 —Ö–≤–∏–ª–∏–Ω.`);
// });

// ===========================================================================

// function processCall(recipient) {
//   // –Ü–º—ñ—Ç—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –∞–±–æ–Ω–µ–Ω—Ç–∞ –≤–∏–ø–∞–¥–∫–æ–≤–∏–º —á–∏—Å–ª–æ–º
//   const isRecipientAvailable = Math.random() > 0.5;

//   if (!isRecipientAvailable) {
//     console.log(`–ê–±–æ–Ω–µ–Ω—Ç ${recipient} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –∑–∞–ª–∏—à—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.`);
//     // –õ–æ–≥—ñ–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –∞–≤—Ç–æ–≤—ñ–¥–ø–æ–≤—ñ–¥–∞—á–∞
//   } else {
//     console.log(`–ó'—î–¥–Ω—É—î–º–æ –∑ ${recipient}, –æ—á—ñ–∫—É–π—Ç–µ...`);
//     // –õ–æ–≥—ñ–∫–∞ –ø—Ä–∏–π–Ω—è—Ç—Ç—è –¥–∑–≤—ñ–Ω–∫–∞
//   }
// }

// processCall("–ú–∞–Ω–≥–æ");

// ===========================================================

// function repeatLog(n) {
//   for (let i = 0; i < n; i += 1) {
//     console.log(i);
//   }
// }

// repeatLog(5);

// =======================================================

// function printValue(value) {
//   console.log(value);
// }

// function prettyPrint(value) {
//   console.log("Logging value: ", value);
// }

// function repeat(n, action) {
//   for (let i = 0; i < n; i += 1) {
//     action(i);
//   }
// }

// // –ü–µ—Ä–µ–¥–∞—î–º–æ printValue —è–∫ callback-—Ñ—É–Ω–∫—Ü—ñ—é
// repeat(9, printValue);
// // 0
// // 1
// // 2

// // –ü–µ—Ä–µ–¥–∞—î–º–æ prettyPrint —è–∫ callback-—Ñ—É–Ω–∫—Ü—ñ—é
// repeat(7, prettyPrint);
// // Logging value: 0
// // Logging value: 1
// // Logging value: 2

// ========================================================================

// const numbers = [5, 10, 15, 20, 25];

// // // –ö–ª–∞—Å–∏—á–Ω–∏–π for
// // for (let i = 0; i < numbers.length; i += 1) {
// //   console.log(`–Ü–Ω–¥–µ–∫—Å ${i}, –∑–Ω–∞—á–µ–Ω–Ω—è ${numbers[i]}`);
// // }

// // –ú–µ—Ç–æ–¥ –ø–µ—Ä–µ–±–∏—Ä–∞–Ω–Ω—è forEach
// numbers.forEach(function (number, index) {
//   console.log(`–Ü–Ω–¥–µ–∫—Å ${index}, –∑–Ω–∞—á–µ–Ω–Ω—è ${number}`);
// });

// ====================================================================

// // –¢–µ —Å–∞–º–µ —Å—Ç—Ä—ñ–ª–æ—á–Ω–æ—é —Ñ—É–Ω–∫—Ü—ñ—î—é
// const arrowAdd = (a, b, c, d, e) => {
//   return a + b + c + d + e;
// };
// console.log(arrowAdd(1, 2, 3, 4, 5));

// =============================================================================

// const foo = (a, b, c) => a - b + c;
// console.log(foo(1, 4, 2));

// ================================================================

// const foo = (...args) => {
//   console.log(args);
// };

// foo(1, 2, 3, 4, 5, 4, 5, 4, 6, 7, 8, 9, 4, 5, 4, 4, 5, 3);

// ====================================================================================

// const numbers = [5, 10, 15, 20, 25];

// // // –û–≥–æ–ª–æ—à–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó
// // numbers.forEach(function (number, index) {
// //   console.log(`–Ü–Ω–¥–µ–∫—Å ${index}, –∑–Ω–∞—á–µ–Ω–Ω—è ${number}`);
// // });

// // –ê–Ω–æ–Ω—ñ–º–Ω–∞ —Å—Ç—Ä—ñ–ª–æ—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
// numbers.forEach((number, index) => {
//   console.log(`–Ü–Ω–¥–µ–∫—Å ${index}, –∑–Ω–∞—á–µ–Ω–Ω—è ${number}`);
// });

// const numbers = [5, 12, 15, 20, 125];

// const logMessage = (number, index) => {
//   console.log(`–Ü–Ω–¥–µ–∫—Å ${index}, –∑–Ω–∞—á–µ–Ω–Ω—è ${number}`);
// };

// numbers.forEach(logMessage);

// ===================================================–ù–æ—Ç–∞—Ç–∫–∏ –∑ –∑–∞–ø–∏—Å–∞–Ω–æ—ó –ª–µ–∫—Ü—ñ—ó=====================================================================
// //=========================callback=================

// const arr = [2, 6, 1, 7, 3];

// function each(arr, callback) {
//   let total = arr[0];
//   for (let i = 1; i < arr.length; i += 1) {
//     total = callback(total, arr[i]);
//   }
//   return total;
// }

// console.log(each(arr, add));

// console.log(each(arr, sum));

// console.log(each(arr, division));

// function add(first, second) {
//   return first + second;
// }

// function sum(first, second) {
//   return first * second;
// }

// function division(first, second) {
//   return first / second;
// }

// =================forEach=============================

// // –º–Ω–æ–∂–∏–º–æ –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É –Ω–∞ 2

// const arr = [2, 6, 1, 7, 3];

// // item - —ñ—Ç–µ—Ä—É—î–º–∏–π –µ–ª–µ–º–µ–Ω—Ç (–æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π)
// // i - index –ø–æ—Ç–æ—á–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π)
// // arr - –º–∞—Å–∏–≤ —è–∫–∏–π —ñ—Ç–µ—Ä—É—î–º–æ (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π)

// arr.forEach(function (item, i) {
//   arr[i] = item * 2;
// });

// console.log(arr);

// -----------------------------------

// // –ø—Ä–æ–ø—É—Å–∫ –µ–ª–µ–º–µ–Ω—Ç–∞ —è–∫—â–æ —Ç—Ä–µ–±–∞ —Ç—ñ–ª—å–∫–∏ —ñ–Ω–¥–µ–∫—Å –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ

// const arr = [2, 6, 1, 7, 3];

// arr.forEach(function (_, idx) {
//   console.log(idx);
// });

// =========================–ü—Ä–∞–∫—Ç–∏–∫–∞==================================================

// Example 1 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
// –ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:

// createProduct(obj, callback) - –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É –±–µ–∑ id, –∞ —Ç–∞–∫–æ–∂ –∫–æ–ª–ª–±–µ–∫. –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É, –¥–æ–¥–∞—é—á–∏ –π–æ–º—É —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å id —Ç–∞ –≤–∏–∫–ª–∏–∫–∞—î –∫–æ–ª–ª–±–µ–∫ –ø–µ—Ä–µ–¥–∞—é—á–∏ –π–æ–º—É —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –æ–±'—î–∫—Ç.
// logProduct(product) - –∫–æ–ª–±–±–µ–∫ –ø—Ä–∏–π–º–∞—é—á–∏–π –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—É—é—á–∏–π –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å
// logTotalPrice(product) - –∫–æ–ª–±–±–µ–∫, —â–æ –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—ñ—é—î –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –≤ –∫–æ–Ω—Å–æ–ª—å
// // –†—ñ—à–µ–Ω–Ω—è

// function createProduct(obj, callback) {
//   const product = {
//     id: Date.now(),
//     ...obj,
//   };
//   callback(product);
//   console.log(product);
// }

// function logProduct(obj) {
//   console.log(`Product ${obj.name}`);
// }

// function logTotalPrice({ price, quantity }) {
//   console.log(`Total price ${price * quantity}`);
// }

// createProduct(
//   {
//     name: "üçé",
//     price: 30,
//     quantity: 3,
//   },
//   logProduct,
// );

// createProduct(
//   {
//     name: "üçã",
//     price: 20,
//     quantity: 5,
//   },
//   logTotalPrice,
// );

// -----------------------------------------------------------------

// // Example 2 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
// // –î–æ–¥–∞–π—Ç–µ –≤ –æ–±'—î–∫—Ç account –º–µ—Ç–æ–¥–∏ withdraw(amount, onSuccess, onError) —Ç–∞ deposit(amount, onSuccess, onError), –¥–µ –ø–µ—Ä—à–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ü–µ —Å—É–º–∞ –æ–ø–µ—Ä–∞—Ü—ñ—ó, –∞ –¥—Ä—É–≥–∏–π —Ç–∞ —Ç—Ä–µ—Ç—ñ–π - –∫–æ–ª–ª–±–µ–∫–∏.

// // –ú–µ—Ç–æ–¥ withdraw –≤–∏–∫–ª–∏–∫–∞—î onError —è–∫—â–æ amount –±—ñ–ª—å—à–µ TRANSACTION_LIMIT –∞–±–æ this.balance, —ñ onSuccess –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É.

// // –ú–µ—Ç–æ–¥ deposit –≤–∏–∫–ª–∏–∫–∞—î onError —è–∫—â–æ amount –±—ñ–ª—å—à–µ TRANSACTION_LIMIT –∞–±–æ –º–µ–Ω—à–µ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î –Ω—É–ª—é, —ñ onSuccess –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É.

// // // –†—ñ—à–µ–Ω–Ω—è
// const TRANSACTION_LIMIT = 1000;

// const account = {
//   username: "Jacob",
//   balance: 400,

//   withdraw(amount, onSuccess, onError) {
//     if (amount > TRANSACTION_LIMIT) {
//       onError(`TRANSACTION_LIMIT ${TRANSACTION_LIMIT}`);
//       return;
//     } else if (this.balance < amount) {
//       onError(`Not enough in the account`);
//       return;
//     }

//     this.balance -= amount;
//     onSuccess(`Transaction complete ${amount}, balance ${this.balance}`);
//   },
//   deposit(amount, onSuccess, onError) {
//     if (amount > TRANSACTION_LIMIT) {
//       onError(`TRANSACTION_LIMIT ${TRANSACTION_LIMIT}`);
//       return;
//     } else if (amount <= 0) {
//       onError(`Nice try Bro üòÇ`);
//       return;
//     }

//     this.balance += amount;
//     onSuccess(`Added ${amount}, balance ${this.balance}.`);
//   },
// };

// function handleSuccess(message) {
//   console.log(`‚úÖ Success! ${message}`);
// }

// function handleError(message) {
//   console.log(`‚ùå Error! ${message}`);
// }

// account.withdraw(2000, handleSuccess, handleError);
// account.withdraw(600, handleSuccess, handleError);
// account.withdraw(300, handleSuccess, handleError);
// account.deposit(1700, handleSuccess, handleError);
// account.deposit(0, handleSuccess, handleError);
// account.deposit(-600, handleSuccess, handleError);
// account.deposit(600, handleSuccess, handleError);

// ========================================================================

// Example 3 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é each(array, callback), —è–∫–∞ –ø–µ—Ä—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –æ—á—ñ–∫—É—î –º–∞—Å–∏–≤, –∞ –¥—Ä—É–≥–∏–º - —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è –¥–æ –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É. –§—É–Ω–∫—Ü—ñ—è each –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ —è–∫–æ–≥–æ –±—É–¥—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤–∏–∫–ª–∏–∫—É –∫–æ–ª–ª–±–µ–∫–∞.

// // –†—ñ—à–µ–Ω–Ω—è
// function each(array, callback) {
// }

// console.log(
//   each([64, 49, 36, 25, 16], function (value) {
//     return value * 2;
//   }),
// );
// console.log(
//   each([64, 49, 36, 25, 16], function (value) {
//     return value - 10;
//   }),
// );
// console.log(
//   each([64, 49, 36, 25, 16], function (value) {
//     return Math.sqrt(value);
//   }),
// );
// console.log(
//   each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
//     return Math.ceil(value);
//   }),
// );
// console.log(
//   each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
//     return Math.floor(value);
//   }),
// );

// ===========================================

// Example 4 - –°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å—Ç—Ä—ñ–ª–æ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π.

// const createProduct = (partialProduct, callback) => {
//     const product = {
//         id: Date.now(),
//         ...partialProduct
//     };
//     callback(product);
// }

// const createProduct = (partialProduct, callback) => callback({
//     id: Date.now(),
//     ...partialProduct
// });

// const logProduct = product => console.log(product.name);
// const logTotalPrice = ({
//     price,
//     quantity
// }) => console.log(price * quantity);

// createProduct({
//     name: 'üçé',
//     price: 30,
//     quantity: 3
// }, logProduct);
// createProduct({
//     name: 'üçã',
//     price: 20,
//     quantity: 5
// }, logTotalPrice);

// =================================================================

// Example 5 - –°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–ª–±–µ–∫—ñ–≤ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å—Ç—Ä—ñ–ª–æ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π.

// const TRANSACTION_LIMIT = 1000;

// const account = {
//     username: 'Jacob',
//     balance: 400,
//     withdraw(amount, onSuccess, onError) {
//         if (amount > TRANSACTION_LIMIT) {
//             onError(`Amount should not exceed ${TRANSACTION_LIMIT} credits`);
//         } else if (amount > this.balance) {
//             onError(`Amount can't exceed account balance of ${this.balance} credits`);
//         } else {
//             this.balance -= amount;
//             onSuccess(`Account balance: ${this.balance}`);
//         }
//     },
//     deposit(amount, onSuccess, onError) {
//         if (amount > TRANSACTION_LIMIT) {
//             onError(`Amount should not exceed ${TRANSACTION_LIMIT} credits`);
//         } else if (amount <= 0) {
//             onError(`Amount must be more than 0 credits`);
//         } else {
//             this.balance += amount;
//             onSuccess(`Account balance: ${this.balance}`);
//         }
//     },
// };

// const handleSuccess = message => console.log(`‚úÖ Success! ${message}`);

// const handleError = message => console.log(`‚ùå Error! ${message}`);

// account.withdraw(2000, handleSuccess, handleError);
// account.withdraw(600, handleSuccess, handleError);
// account.withdraw(300, handleSuccess, handleError);
// account.deposit(1700, handleSuccess, handleError);
// account.deposit(0, handleSuccess, handleError);
// account.deposit(-600, handleSuccess, handleError);
// account.deposit(600, handleSuccess, handleError);

// =================================================================

// // Example 6 - –Ü–Ω–ª–∞–π–Ω —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
// // –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å—Ç—Ä—ñ–ª–æ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π.

// function each(array, callback) {
//   const newArr = [];
//   for (const el of array) {
//     newArr.push(callback(el));
//   }
//   return newArr;
// }

// console.log(each([64, 49, 36, 25, 16], (value) => value * 2));

// console.log(each([64, 49, 36, 25, 16], (value) => value - 10));

// console.log(each([64, 49, 36, 25, 16], (value) => Math.sqrt(value)));

// console.log(each([1.5, 2.1, 16.4, 9.7, 11.3], (value) => Math.ceil(value)));

// console.log(each([1.5, 2.1, 16.4, 9.7, 11.3], (value) => Math.floor(value)));

// =========================================

// // Example 7 - –ú–µ—Ç–æ–¥ forEach
// // –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É forEach —Ç–∞ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.

// //  –±—É–ª–æ

// // function logItems(items) {
// //   console.log(items);
// //   for (let i = 0; i < items.length; i += 1) {
// //     console.log(`${i + 1} - ${items[i]}`);
// //   }
// // }

// const logItems = (arr) =>
//   arr.forEach((item, idx) => console.log(`${idx + 1} - ${item}`));

// logItems(["Mango", "Poly", "Ajax"]);
// logItems(["üçé", "üçá", "üçë", "üçå", "üçã"]);

// =========================================

// Example 8 - –ú–µ—Ç–æ–¥ forEach
// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É forEach —Ç–∞ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.

// –±—É–ª–æ

// function calculateAverage(...args) {
//   let total = 0;
//   for (let i = 0; i < args.length; i += 1) {
//     total += args[i];
//   }
//   return total / args.length;
// }

// —Å—Ç–∞–ª–æ

// const calculateAverage = (...arr) => {
//   let total = 0;
//   arr.forEach((value) => (total += value));

//   return total / arr.length;
// };

// console.log(calculateAverage(1, 2, 3, 4)); // 2.5
// console.log(calculateAverage(14, 8, 2)); // 8
// console.log(calculateAverage(27, 43, 2, 8, 36)); // 23.2

// =====================–ü—Ä–∞–∫—Ç–∏–∫–∞ –∑ –æ–Ω–ª–∞–π–Ω –ª–µ–∫—Ü—ñ—ó===========================================================

// // Task - 1
// // –°—Ç–≤–æ—Ä–∏ —Å—Ç—Ä—ñ–ª–æ—á–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é logItems(), —è–∫–∞ –≤–∏–≤–æ–¥–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤–∞, –∑—Ä–æ–±–∏ –ø–µ—Ä–µ–±—ñ—Ä –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É forEach().

// const logItems = (arr) =>
//   arr.forEach((item, idx) => console.log(`${idx + 1} - ${item}`));

// logItems(["Mango", "Poly", "Ajax"]);
// logItems(["üçé", "üçá", "üçë", "üçå", "üçã"]);

// -----------------------------------------------

// // Task - 2
// // –ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:
// // createProduct(obj, callback) - –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É –±–µ–∑ id, –∞ —Ç–∞–∫–æ–∂ –∫–æ–ª–ª–±–µ–∫. –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É, –¥–æ–¥–∞—é—á–∏ –π–æ–º—É —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å id —Ç–∞ –≤–∏–∫–ª–∏–∫–∞—î –∫–æ–ª–ª–±–µ–∫ –ø–µ—Ä–µ–¥–∞—é—á–∏ –π–æ–º—É —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –æ–±'—î–∫—Ç.
// // logProduct(product) - –∫–æ–ª–±–±–µ–∫ –ø—Ä–∏–π–º–∞—é—á–∏–π –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—É—é—á–∏–π –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å
// // logTotalPrice(product) - –∫–æ–ª–±–±–µ–∫, —â–æ –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—ñ—é—î –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –≤ –∫–æ–Ω—Å–æ–ª—å

// function createProduct(obj, callback) {
//   const product = {
//     id: Date.now(),
//     ...obj,
//   };
//   callback(product);
// }

// function logProduct(product) {
//   console.log(`Product`, product);
// }

// function logTotalPrice({ price, quantity }) {
//   console.log(`Product total price, ${price * quantity}`);
// }

// createProduct({ name: "üçé", price: 30, quantity: 3 }, logProduct);

// createProduct({ name: "üçã", price: 20, quantity: 5 }, logTotalPrice);

// ---------------------------------------------

// //  Task - 3
// // –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é —è–∫–∞ –±—É–¥–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∏.
// // 1 - –º–∞—Å–∏–≤ —á–∏—Å–µ–ª.
// // 2 - —Ñ—É–Ω–∫—Ü—ñ—é —è–∫–∞ –º–∞—î –æ–ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É.
// // –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç —è–∫–æ–≥–æ —î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
// // function each(arr, action) {}

// // console.log(
// //   each([64, 49, 36, 25, 16], function (value) {
// //     return value * 2;
// //   }),
// // );

// // console.log(
// //   each([64, 49, 36, 25, 16], function (value) {
// //     return value - 10;
// //   }),
// // );

// // console.log(
// //   each([64, 49, 36, 25, 16], function (value) {
// //     return Math.ceil(value);
// //   }),
// // );

// // console.log(
// //   each([64, 49, 36, 25, 16], function (value) {
// //     return Math.floor(value);
// //   }),
// // );

// // –ø–µ—Ä–µ–ø–∏—Å—É—î–º–æ –Ω–∞ arrow function

// function each(arr, action) {
//   const items = [];
//   // arr.forEach((elem) => {
//   //   const result = action(elem);
//   //   items.push(result);
//   // });

//   // –∫–æ—Ä–æ—Ç—à–∏–π –∑–∞–ø–∏—Å
//   arr.forEach((elem) => items.push(action(elem)));

//   return items;
// }

// console.log(each([64, 49, 36, 25, 16], (value) => value * 2));

// console.log(each([64, 49, 36, 25, 16], (value) => value - 10));

// console.log(each([1.5, 2.1, 16.4, 9.7, 11.3], (value) => Math.ceil(value)));

// console.log(each([64, 49, 36, 25, 16], (value) => Math.floor(value)));

// ----------------------------------------------------------------------

// // Task-4
// // –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é getProductDetails, —è–∫–∞ –ø—Ä–∏–π–º–∞—î —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä—É productId —Ç–∞ –¥–≤—ñ –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—ó successCallback —Ç–∞ errorCallback. –§—É–Ω–∫—Ü—ñ—è getProductDetails –ø–æ–≤–∏–Ω–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ –ø—Ä–æ –≤–∫–∞–∑–∞–Ω–∏–π —Ç–æ–≤–∞—Ä —Ç–∞ –ø–µ—Ä–µ–¥–∞—Ç–∏ —ó—Ö —É successCallback.  –£ –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏, –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è errorCallback —ñ –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É.
// const products = [
//   {
//     id: 1,
//     name: "–¢–µ–ª–µ—Ñ–æ–Ω",
//     price: 10000,
//     description: "–°–º–∞—Ä—Ç—Ñ–æ–Ω –∑ –≤–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–∏–º –¥–∏—Å–ø–ª–µ—î–º —Ç–∞ –ø–æ—Ç—É–∂–Ω–∏–º –ø—Ä–æ—Ü–µ—Å–æ—Ä–æ–º.",
//   },
//   {
//     id: 2,
//     name: "–ù–æ—É—Ç–±—É–∫",
//     price: 25000,
//     description: "–õ–µ–≥–∫–∏–π —Ç–∞ –ø–æ—Ç—É–∂–Ω–∏–π –Ω–æ—É—Ç–±—É–∫ –¥–ª—è —Ä–æ–±–æ—Ç–∏ —Ç–∞ —Ä–æ–∑–≤–∞–≥.",
//   },
//   {
//     id: 3,
//     name: "–ü–ª–∞–Ω—à–µ—Ç",
//     price: 8000,
//     description: "–ö–æ–º–ø–∞–∫—Ç–Ω–∏–π –ø–ª–∞–Ω—à–µ—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∫–æ–Ω—Ç–µ–Ω—Ç—É.",
//   },
// ];

// function getProductDetails(id, succes, error) {
//   for (const product of products) {
//     if (product.id === id) {
//       succes(product);
//       return;
//     }
//   }
//   error();
// }

// getProductDetails(3, handleSuccess, handleError);

// // getProductDetails(11, handleSuccess, handleError);

// function handleSuccess(message) {
//   console.log(`‚úÖ Success!`, message);
// }

// function handleError(productId) {
//   console.log(`‚ùå Error! Product not found`);
// }

// =====================================–ü–µ—Ä–µ–±–∏—Ä–∞—é—á—ñ –º–µ—Ç–æ–¥–∏ –º–∞—Å–∏–≤—ñ–≤======================================================================================

// // ================–ß–∏—Å—Ç—ñ —Ñ—É–Ω–∫—Ü—ñ—ó=======================

// const pureMultiply = (array, value) => {
//   const newArray = [];

//   array.forEach((element) => {
//     newArray.push(element * value);
//   });

//   return newArray;
// };

// const numbers = [1, 2, 3, 4, 5];
// const doubledNumbers = pureMultiply(numbers, 2);

// // –ú—É—Ç–∞—Ü—ñ—è –≤–∏—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö –Ω–µ –≤—ñ–¥–±—É–ª–∞—Å—è
// console.log(numbers); // [1, 2, 3, 4, 5]
// // –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä–Ω—É–ª–∞ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –∑—ñ –∑–º—ñ–Ω–µ–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
// console.log(doubledNumbers); // [2, 4, 6, 8, 10]

// // ================–ú–µ—Ç–æ–¥ Map()=======================

// const planets = ["–ó–µ–º–ª—è", "–ú–∞—Ä—Å", "–í–µ–Ω–µ—Ä–∞", "–Æ–ø—ñ—Ç–µ—Ä"];

// const planetsInUpperCase = planets.map((planet) => planet.toUpperCase());
// console.log(planetsInUpperCase); // ['–ó–ï–ú–õ–Ø', '–ú–ê–†–°', '–í–ï–ù–ï–†–ê', '–Æ–ü–Ü–¢–ï–†']

// const planetsInLowerCase = planets.map((planet) => planet.toLowerCase());
// console.log(planetsInLowerCase); // ['–∑–µ–º–ª—è', '–º–∞—Ä—Å', '–≤–µ–Ω–µ—Ä–∞', '—é–ø—ñ—Ç–µ—Ä']

// // –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–∞—Å–∏–≤ –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è
// console.log(planets); // ['–ó–µ–º–ª—è', '–ú–∞—Ä—Å', '–í–µ–Ω–µ—Ä–∞', '–Æ–ø—ñ—Ç–µ—Ä']

// // ================–ú–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤ —ñ –º–µ—Ç–æ–¥ map()=======================
// // ================–ú–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤ —ñ –º–µ—Ç–æ–¥ map()=======================

// const students = [
//   { name: "–ú–∞–Ω–≥–æ", score: 83 },
//   { name: "–ü–æ–ª—ñ", score: 59 },
//   { name: "–ê—è–∫—Å", score: 37 },
//   { name: "–ö—ñ–≤—ñ", score: 94 },
//   { name: "–•'—é—Å—Ç–æ–Ω", score: 64 },
// ];

// const names = students.map((student) => student.name);
// console.log(names); // ['–ú–∞–Ω–≥–æ', '–ü–æ–ª—ñ', '–ê—è–∫—Å', '–ö—ñ–≤—ñ', '–•'—é—Å—Ç–æ–Ω']

// // ================–ú–µ—Ç–æ–¥ flatMap()=======================

// const students = [
//   { name: "–ú–∞–Ω–≥–æ", courses: ["–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "—Ñ—ñ–∑–∏–∫–∞"] },
//   { name: "–ü–æ–ª—ñ", courses: ["—ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞"] },
//   { name: "–ö—ñ–≤—ñ", courses: ["—Ñ—ñ–∑–∏–∫–∞", "–±—ñ–æ–ª–æ–≥—ñ—è"] },
// ];

// students.map((student) => student.courses);
// console.log(students.map((student) => student.courses));
// // [['–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '—Ñ—ñ–∑–∏–∫–∞'], ['—ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞', '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞'], ['—Ñ—ñ–∑–∏–∫–∞', '–±—ñ–æ–ª–æ–≥—ñ—è']]

// students.flatMap((student) => student.courses);
// console.log(students.flatMap((student) => student.courses));
// // ['–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '—Ñ—ñ–∑–∏–∫–∞', '—ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞', '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '—Ñ—ñ–∑–∏–∫–∞', '–±—ñ–æ–ª–æ–≥—ñ—è'];

// // ================–ú–µ—Ç–æ–¥ filter()=======================

// const values = [51, -3, 27, 21, -68, 42, -37];

// const positiveValues = values.filter((value) => value >= 0);
// console.log(positiveValues);

// const negativeValues = values.filter((value) => value < 0);
// console.log(negativeValues);

// const bigValues = values.filter((value) => value > 100);
// console.log(bigValues);

// console.log(values);

// // ================–§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤=======================

// const students = [
//   { name: "–ú–∞–Ω–≥–æ", courses: ["–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "—Ñ—ñ–∑–∏–∫–∞"] },
//   { name: "–ü–æ–ª—ñ", courses: ["—ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞"] },
//   { name: "–ö—ñ–≤—ñ", courses: ["—Ñ—ñ–∑–∏–∫–∞", "–±—ñ–æ–ª–æ–≥—ñ—è"] },
// ];

// const allCourses = students.flatMap((student) => student.courses);
// // ['–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '—Ñ—ñ–∑–∏–∫–∞', '—ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞', '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '—Ñ—ñ–∑–∏–∫–∞', '–±—ñ–æ–ª–æ–≥—ñ—è'];
// const uniqueCourses = allCourses.filter(
//   (course, index, array) => array.indexOf(course) === index,
// );
// console.log(uniqueCourses);

// // ================–ú–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤=======================

// const LOW_SCORE = 50;
// const HIGH_SCORE = 80;
// const students = [
//   { name: "–ú–∞–Ω–≥–æ", score: 83 },
//   { name: "–ü–æ–ª—ñ", score: 59 },
//   { name: "–ê—è–∫—Å", score: 37 },
//   { name: "–ö—ñ–≤—ñ", score: 94 },
//   { name: "–•'—é—Å—Ç–æ–Ω", score: 64 },
// ];

// const best = students.filter((student) => student.score >= HIGH_SCORE);
// console.log(best);

// const worst = students.filter((student) => student.score < LOW_SCORE);
// console.log(worst);

// const average = students.filter(
//   ({ score }) => score >= LOW_SCORE && score < HIGH_SCORE,
// );
// console.log(average);

// // ================–ú–µ—Ç–æ–¥ find()=======================

// const colorPickerOptions = [
//   { label: "red", color: "#F44336" },
//   { label: "green", color: "#4CAF50" },
//   { label: "blue", color: "#2196F3" },
//   { label: "pink", color: "#E91E63" },
//   { label: "indigo", color: "#3F51B5" },
// ];

// colorPickerOptions.find((option) => option.label === "blue"); // { label: 'blue', color: '#2196F3' }
// colorPickerOptions.find((option) => option.label === "pink"); // { label: 'pink', color: '#E91E63' }
// colorPickerOptions.find((option) => option.label === "green"); // { label: "green", color: "#4CAF50" }
// colorPickerOptions.find((option) => option.label === "white"); // undefined

// // ================–ú–µ—Ç–æ–¥ findIndex()=======================

// const colorPickerOptions = [
//   { label: "red", color: "#F44336" },
//   { label: "green", color: "#4CAF50" },
//   { label: "blue", color: "#2196F3" },
//   { label: "pink", color: "#E91E63" },
//   { label: "indigo", color: "#3F51B5" },
// ];

// colorPickerOptions.findIndex((option) => option.label === "blue"); // 2
// colorPickerOptions.findIndex((option) => option.label === "red"); // 0
// colorPickerOptions.findIndex((option) => option.label === "pink"); // 3
// colorPickerOptions.findIndex((option) => option.label === "white"); // -1

// console.log(colorPickerOptions.findIndex((option) => option.label === "blue")); // 2
// console.log(colorPickerOptions.findIndex((option) => option.label === "red")); // 0
// console.log(colorPickerOptions.findIndex((option) => option.label === "pink")); // 3
// console.log(colorPickerOptions.findIndex((option) => option.label === "white")); // -1

// // ================–ú–µ—Ç–æ–¥–∏ every() —ñ some()=======================

// // –£—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –±—ñ–ª—å—à—ñ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—é—Ç—å –Ω—É–ª—é? - —Ç–∞–∫
// [1, 2, 3, 4, 5].every((value) => value >= 0); // true
// console.log([1, 2, 3, 4, 5].every((value) => value >= 0));

// // –£—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –±—ñ–ª—å—à—ñ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—é—Ç—å –Ω—É–ª—é? - –Ω—ñ
// [1, 2, 3, -10, 4, 5].every((value) => value >= 0); // false
// console.log([1, 2, 3, -10, 4, 5].every((value) => value >= 0));

// // -----------------------

// // –ß–∏ —î —Ö–æ—á–∞ –± –æ–¥–∏–Ω –µ–ª–µ–º–µ–Ω—Ç, —â–æ –±—ñ–ª—å—à–∏–π –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î –Ω—É–ª—é? - —Ç–∞–∫
// [1, 2, 3, 4, 5].some((value) => value >= 0); // true

// // –ß–∏ —î —Ö–æ—á–∞ –± –æ–¥–∏–Ω –µ–ª–µ–º–µ–Ω—Ç, —â–æ –±—ñ–ª—å—à–∏–π –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î –Ω—É–ª—é? - —Ç–∞–∫
// [-7, -20, 3, -10, -14].some((value) => value >= 0); // true

// // –ß–∏ —î —Ö–æ—á–∞ –± –æ–¥–∏–Ω –µ–ª–µ–º–µ–Ω—Ç, —â–æ –º–µ–Ω—à–∏–π –Ω—É–ª—è? - –Ω—ñ
// [1, 2, 3, 4, 5].some((value) => value < 0); // false

// // –ß–∏ —î —Ö–æ—á–∞ –± –æ–¥–∏–Ω –µ–ª–µ–º–µ–Ω—Ç, —â–æ –º–µ–Ω—à–∏–π –Ω—É–ª—è? - —Ç–∞–∫
// [1, 2, 3, -10, 4, 5].some((value) => value < 0); // true

// // ------------------–ú–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤-------------

// const fruits = [
//   { name: "apples", amount: 100 },
//   { name: "bananas", amount: 0 },
//   { name: "grapes", amount: 50 },
// ];

// // every –ø–æ–≤–µ—Ä–Ω–µ true —Ç—ñ–ª—å–∫–∏, —è–∫—â–æ —É—Å—ñ—Ö —Ñ—Ä—É–∫—Ç—ñ–≤ –±—É–¥–µ –±—ñ–ª—å—à–µ 0 —à—Ç—É–∫
// const allAvailable = fruits.every((fruit) => fruit.amount > 0); // false
// console.log(allAvailable);

// // some –ø–æ–≤–µ—Ä–Ω–µ true, —è–∫—â–æ —Ö–æ—á–∞ –± –æ–¥–Ω–æ–≥–æ —Ñ—Ä—É–∫—Ç—É –±—É–¥–µ –±—ñ–ª—å—à–µ 0 —à—Ç—É–∫
// const anyAvailable = fruits.some((fruits) => fruits.amount > 0); // true
// console.log(anyAvailable);

// // ================–ú–µ—Ç–æ–¥ reduce()=======================

// const total = [2, 7, 3, 14, 6].reduce((previousValue, number) => {
//   return previousValue + number;
// }, 0);

// console.log(total); // 32

// // ---------------–ú–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤------------------

// const students = [
//   { name: "–ú–∞–Ω–≥–æ", score: 83 },
//   { name: "–ü–æ–ª—ñ", score: 59 },
//   { name: "–ê—è–∫—Å", score: 37 },
//   // { name: "–ö—ñ–≤—ñ", score: 94 },
//   // { name: "–•'—é—Å—Ç–æ–Ω", score: 64 },
// ];

// const totalScore = students.reduce((total, student) => {
//   return total + student.score;
// }, 0);

// const averageScore = totalScore / students.length;
// console.log(totalScore);
// console.log(averageScore);

// // -------------–ü—Ä–æ—Å—É–Ω—É—Ç–∏–π reduce()---------

// const tweets = [
//   { id: "000", likes: 5, tags: ["js", "nodejs"] },
//   { id: "001", likes: 2, tags: ["html", "css"] },
//   { id: "002", likes: 17, tags: ["html", "js", "nodejs"] },
//   { id: "003", likes: 8, tags: ["css", "react"] },
//   { id: "004", likes: 0, tags: ["js", "nodejs", "react"] },
// ];

// // –ü—Ä–æ–π–¥–µ–º–æ –ø–æ –≤—Å—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç–∞—Ö –∫–æ–ª–µ–∫—Ü—ñ—ó —ñ –¥–æ–¥–∞–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ likes
// // –¥–æ –∞–∫—É–º—É–ª—è—Ç–æ—Ä–∞, –ø–æ—á–∞—Ç–∫–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫–æ–≥–æ –≤–∫–∞–∂–µ–º–æ 0.
// const likes = tweets.reduce((totalLikes, tweet) => totalLikes + tweet.likes, 0);

// console.log(likes); // 32

// // –ú–∞–±—É—Ç—å, –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –ª–∞–π–∫—ñ–≤ - –Ω–µ –æ–¥–∏–Ω–æ—á–Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è, —Ç–æ–º—É –Ω–∞–ø–∏—à–µ–º–æ —Ñ—É–Ω–∫—Ü—ñ—é
// // –¥–ª—è –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É –ª–∞–π–∫—ñ–≤ –∑ –∫–æ–ª–µ–∫—Ü—ñ—ó
// const countLikes = (tweets) => {
//   return tweets.reduce((totalLikes, tweet) => totalLikes + tweet.likes, 0);
// };

// console.log(countLikes(tweets)); // 32

// // ---------–∑–±–µ—Ä–µ–º–æ —É—Å—ñ —Ç–µ–≥–∏ –≤ –º–∞—Å–∏–≤----------------

// // const tweets = [
// //   { id: "000", likes: 5, tags: ["js", "nodejs"] },
// //   { id: "001", likes: 2, tags: ["html", "css"] },
// //   { id: "002", likes: 17, tags: ["html", "js", "nodejs"] },
// //   { id: "003", likes: 8, tags: ["css", "react"] },
// //   { id: "004", likes: 0, tags: ["js", "nodejs", "react"] },
// // ];

// // // –ü—Ä–æ–π–¥–µ–º–æ –ø–æ –≤—Å—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç–∞—Ö –∫–æ–ª–µ–∫—Ü—ñ—ó —ñ –¥–æ–¥–∞–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ tags
// // // –¥–æ –∞–∫—É–º—É–ª—è—Ç–æ—Ä–∞, –ø–æ—á–∞—Ç–∫–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫–æ–≥–æ –≤–∫–∞–∂–µ–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–º –º–∞—Å–∏–≤–æ–º [].
// // // –ù–∞ –∫–æ–∂–Ω—ñ–π —ñ—Ç–µ—Ä–∞—Ü—ñ—ó –ø—É—à–∏–º–æ –≤ –∞–∫—É–º—É–ª—è—Ç–æ—Ä —É—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ tweet.tags —ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –π–æ–≥–æ.
// // const tags = tweets.reduce((allTags, tweet) => {
// //   allTags.push(...tweet.tags);

// //   return allTags;
// // }, []);

// // console.log(tags);

// // // –ú–∞–±—É—Ç—å, –∑–±–∏—Ä–∞–Ω–Ω—è —Ç–µ–≥—ñ–≤ - –Ω–µ –æ–¥–∏–Ω–æ—á–Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è, —Ç–æ–º—É –Ω–∞–ø–∏—à–µ–º–æ —Ñ—É–Ω–∫—Ü—ñ—é
// // // –¥–ª—è –∑–±–∏—Ä–∞–Ω–Ω—è —Ç–µ–≥—ñ–≤ –∑ –∫–æ–ª–µ–∫—Ü—ñ—ó
// // const getTags = (tweets) =>
// //   tweets.reduce((allTags, tweet) => {
// //     allTags.push(...tweet.tags);

// //     return allTags;
// //   }, []);

// // console.log(getTags(tweets));

// // -------------–†–∞—Ö—É—î–º–æ –∫-—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Ç–µ–≥—ñ–≤--------------------------

// const tweets = [
//   { id: "000", likes: 5, tags: ["js", "nodejs"] },
//   { id: "001", likes: 2, tags: ["html", "css"] },
//   { id: "002", likes: 17, tags: ["html", "js", "nodejs"] },
//   { id: "003", likes: 8, tags: ["css", "react"] },
//   { id: "004", likes: 0, tags: ["js", "nodejs", "react"] },
// ];

// const getTags = (tweets) =>
//   tweets.reduce((allTags, tweet) => {
//     allTags.push(...tweet.tags);

//     return allTags;
//   }, []);

// const tags = getTags(tweets);

// // –í–∏–Ω–µ—Å–µ–º–æ callback-—Ñ—É–Ω–∫—Ü—ñ—é –æ–∫—Ä–µ–º–æ, –∞ –≤ reduc–µ –ø–µ—Ä–µ–¥–∞–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–µ—ó.
// // –¶–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞, —è–∫—â–æ callback-—Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å–∏—Ç—å –≤–µ–ª–∏–∫–∞.

// // –Ø–∫—â–æ –≤ –æ–±'—î–∫—Ç—ñ-–∞–∫—É–º—É–ª—è—Ç–æ—Ä—ñ acc –≤—ñ–¥—Å—É—Ç–Ω—è —Å–≤–æ—è –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å –∑ –∫–ª—é—á–µ–º tag,
// // —Ç–æ —Å—Ç–≤–æ—Ä—é—î–º–æ —ó—ó —ñ –∑–∞–ø–∏—Å—É—î–º–æ —ó–π –∑–Ω–∞—á–µ–Ω–Ω—è 0.
// // –í —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É –∑–±—ñ–ª—å—à—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞ 1.
// const getTagStats = (acc, tag) => {
//   if (!acc.hasOwnProperty(tag)) {
//     acc[tag] = 0;
//   }

//   acc[tag] += 1;

//   return acc;
// };

// // –ü–æ—á–∞—Ç–∫–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∞–∫—É–º—É–ª—è—Ç–æ—Ä–∞ - —Ü–µ –ø–æ—Ä–æ–∂–Ω—ñ–π –æ–±'—î–∫—Ç {}
// const countTags = (tags) => tags.reduce(getTagStats, {});

// const tagCount = countTags(tags);
// console.log(tagCount);

// =================–º–µ—Ç–æ–¥ Sort()=============================================

// //-----------—Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤-----------

// const students = [
//   { name: "–ú–∞–Ω–≥–æ", score: 83 },
//   { name: "–ü–æ–ª—ñ", score: 59 },
//   { name: "–ê—è–∫—Å", score: 37 },
//   { name: "–ö—ñ–≤—ñ", score: 94 },
// ];

// const inAscendingScoreOrder = students.sort(
//   (firstStudent, secondStudent) => firstStudent.score - secondStudent.score,
// );

// // const inDescendingScoreOrder = students.sort(
// //   (firstStudent, secondStudent) => secondStudent.score - firstStudent.score,
// // );

// // const inAlphabeticalOrder = students.sort((firstStudent, secondStudent) =>
// //   firstStudent.name.localeCompare(secondStudent.name),
// // );

// console.log(inAscendingScoreOrder);
// // console.log(inDescendingScoreOrder);
// // console.log(inAlphabeticalOrder);

// // ================–õ–∞–Ω—Ü—é–∂–∫–∏ –º–µ—Ç–æ–¥—ñ–≤=======================

// const students = [
//   { name: "–ú–∞–Ω–≥–æ", score: 83, courses: ["–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "—Ñ—ñ–∑–∏–∫–∞"] },
//   { name: "–ü–æ–ª—ñ", score: 59, courses: ["—ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞"] },
//   { name: "–ê—è–∫—Å", score: 37, courses: ["—Ñ—ñ–∑–∏–∫–∞", "–±—ñ–æ–ª–æ–≥—ñ—è"] },
//   { name: "–ö—ñ–≤—ñ", score: 94, courses: ["–ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞", "—ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞"] },
// ];

// const sortedByAscendingScore = [...students].sort((a, b) => a.score - b.score);
// const names = sortedByAscendingScore.map((student) => student.name);

// console.log(names); // ['–ê—è–∫—Å', '–ü–æ–ª—ñ', '–ú–∞–Ω–≥–æ', '–ö—ñ–≤—ñ']

// ====================================–ù–æ—Ç–∞—Ç–∫–∏ –∑ –∑–∞–ø–∏—Å–∞–Ω–æ—ó –ª–µ–∫—Ü—ñ—ó==============================================

// –ü—Ä–∞–∫—Ç–∏–∫–∞

// // Task-1
// // –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –º–µ—Ç–æ–¥ map, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤, –≤ —è–∫–æ–º—É –±—É–¥–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª –∫–æ–∂–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞.

// const students = [
//   { name: "John", grades: [80, 85, 90] },
//   { name: "Alice", grades: [90, 95, 92] },
//   { name: "Bob", grades: [70, 80, 75] },
//   { name: "Emily", grades: [95, 92, 88] },
//   { name: "David", grades: [85, 88, 90] },
// ];

// function getAverage(arr) {
//   return arr.map(({ name, grades }) => {
//     const total = grades.reduce((acc, item) => acc + item, 0);
//     const obj = {
//       name,
//       average: Math.round(total / grades.length),
//     };
//     return obj;
//   });
// }
// console.log(getAverage(students));

// -----------------------------------------------------------

// // Task-2
// // –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –º–µ—Ç–æ–¥ filter, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, –≤ —è–∫–æ–º—É –±—É–¥—É—Ç—å —Ç—ñ–ª—å–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∏ —è–∫—ñ —Å—Ç–∞—Ä—à–µ 20 —Ä–æ–∫—ñ–≤

// const students = [
//   { name: "John", age: 20, gpa: 3.8 },
//   { name: "Alice", age: 21, gpa: 3.2 },
//   { name: "Bob", age: 19, gpa: 3.5 },
//   { name: "Emily", age: 22, gpa: 3.9 },
//   { name: "David", age: 20, gpa: 3.7 },
// ];

// function getAdult(arr) {
//   // const result = arr.filter((student) => student.age > 20);
//   // return result;

//   // -----–∞–±–æ –ø–æ-–¥–æ—Ä–æ—Å–ª–æ–º—É-----
//   return arr.filter(({ age }) => age > 20);
// }

// console.log(getAdult(students));

// --------------------------------------------------------------------

// // Task-3
// // –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –º–µ—Ç–æ–¥ find, —â–æ–± –∑–Ω–∞–π—Ç–∏ –∫–Ω–∏–∂–∫—É –∑–∞ —ó—ó –Ω–∞–∑–≤–æ—é (title)
// const books = [
//   {
//     title: "JavaScript: The Good Parts",
//     author: "Douglas Crockford",
//     year: 2008,
//   },
//   {
//     title: "Clean Code: A Handbook of Agile Software Craftsmanship",
//     author: "Robert C. Martin",
//     year: 2008,
//   },
//   {
//     title: "The Pragmatic Programmer: Your Journey to Mastery",
//     author: "Andrew Hunt, David Thomas",
//     year: 1999,
//   },
//   {
//     title: "Design Patterns: Elements of Reusable Object-Oriented Software",
//     author: "Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides",
//     year: 1994,
//   },
//   {
//     title: "Refactoring: Improving the Design of Existing Code",
//     author: "Martin Fowler",
//     year: 1999,
//   },
// ];

// function getBook(arr, title) {
//   // const book = arr.find((book) => book.title === title);

//   // return book || "Not found";

//   // // --------–ê–±–æ –ø–æ-–¥–æ—Ä–æ—Å–ª–æ–º—É----------

//   return arr.find(({ title: bookTitle }) => bookTitle === title) || "Not found";
// }

// console.log(
//   getBook(books, "The Pragmatic Programmer: Your Journey to Mastery"),
// );
// console.log(getBook(books, "Qwerty"));

// ---------------------------------------------------------

// // Task-4
// // –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –º–µ—Ç–æ–¥ reduce, —â–æ–± –æ–±—á–∏—Å–ª–∏—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å –≤—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤ —É –º–∞—Å–∏–≤—ñ, —è–∫–∞ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î—Ç—å—Å—è —è–∫ –¥–æ–±—É—Ç–æ–∫ —Ü—ñ–Ω–∏ —Ç–æ–≤–∞—Ä—É –Ω–∞ –π–æ–≥–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å, –∞ –ø–æ—Ç—ñ–º —Å—É–º—É—î—Ç—å—Å—è –∑ —ñ–Ω—à–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏. –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –∑–∞–≥–∞–ª—å–Ω–æ—é –≤–∞—Ä—Ç—ñ—Å—Ç—é –≤—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤.

// const products = [
//   { id: 1, name: "T-shirt", price: 20, quantity: 3 },
//   { id: 2, name: "Jeans", price: 50, quantity: 2 },
//   { id: 3, name: "Sneakers", price: 80, quantity: 1 },
//   { id: 4, name: "Hat", price: 15, quantity: 4 },
//   { id: 5, name: "Socks", price: 5, quantity: 6 },
// ];

// function getTotal(arr) {
//   // const total = arr.reduce((acc, product) => {
//   //   acc += product.price * product.quantity;
//   //   return acc;
//   // }, 0);
//   // return total;

//   // --------–∞–±–æ –ø–æ-–¥–æ—Ä–æ—Å–ª–æ–º—É---------
//   return arr.reduce((acc, { price, quantity }) => (acc += price * quantity), 0);
// }

// console.log(getTotal(products));

// -----------------------------------------------------------

// // Task-5
// // –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –º–µ—Ç–æ–¥ sort, —â–æ–± –≤—ñ–¥—Å–æ—Ä—Ç—É–≤–∞—Ç–∏ –∫–Ω–∏–∂–∫–∏ –∑–∞ —Ä–æ–∫–æ–º –≤–∏–¥–∞–Ω–Ω—è —É —Å–ø–∞–¥–∞—é—á–æ–º—É –ø–æ—Ä—è–¥–∫—É. –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–º –º–∞—Å–∏–≤–æ–º –∫–Ω–∏–∂–æ–∫ –∑–∞ —Ä–æ–∫–æ–º –≤–∏–¥–∞–Ω–Ω—è.

// const books = [
//   {
//     title: "JavaScript: The Good Parts",
//     author: "Douglas Crockford",
//     year: 2008,
//   },
//   {
//     title: "Clean Code: A Handbook of Agile Software Craftsmanship",
//     author: "Robert C. Martin",
//     year: 2008,
//   },
//   {
//     title: "The Pragmatic Programmer: Your Journey to Mastery",
//     author: "Andrew Hunt, David Thomas",
//     year: 1999,
//   },
//   {
//     title: "Design Patterns: Elements of Reusable Object-Oriented Software",
//     author: "Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides",
//     year: 1994,
//   },
//   {
//     title: "Refactoring: Improving the Design of Existing Code",
//     author: "Martin Fowler",
//     year: 1999,
//   },
// ];

// function sortDesc(arr) {
//   // const result = [...arr].sort((a, b) => b.year - a.year);
//   // return result;

//   // ------–ê–±–æ –ø–æ-–¥–æ—Ä–æ—Å–ª–æ–º—É--------------

//   return [...arr].sort((a, b) => b.year - a.year);

//   //   // ----------—è–∫—â–æ —Ç—Ä–µ–±–∞ —ñ –∞–≤—Ç–æ—Ä–∞ —ñ —Ä—ñ–∫ –≤–∏–¥–∞–Ω–Ω—è---------------------

//   //   return [...arr]
//   //     .sort((a, b) => b.year - a.year)
//   //     .map(({ author, year }) => ({ author, year }));
// }

// console.log(sortDesc(books));

// -----------------------------------------------------------

// // Task-6
// // –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø–µ—Ä–µ–±–∏—Ä–∞—é—á—ñ –º–µ—Ç–æ–¥–∏ –º–∞—Å–∏–≤—É map —Ç–∞ filter, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–∞—Å–∏–≤ –Ω–∞–∑–≤ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤, —Ü—ñ–Ω–∞ —è–∫–∏—Ö –º–µ–Ω—à–µ 2 –¥–æ–ª–∞—Ä—ñ–≤ —Ç–∞ –≤—ñ–¥—Å–æ—Ä—Ç—É–π —ó—Ö –∑–∞ –∞–ª—Ñ–∞–≤—ñ—Ç–Ω–∏–º –ø–æ—Ä—è–¥–∫–æ–º.

// const products = [
//   { id: 2, name: "Banana", price: 0.99 },
//   { id: 1, name: "Apple", price: 1.99 },
//   { id: 3, name: "Orange", price: 2.49 },
//   { id: 4, name: "Grapes", price: 3.99 },
// ];

// function getProducts(arr) {
//   // const min = arr.filter((product) => product.price < 2);
//   // const names = min.map((product) => product.name);
//   // names.sort((a, b) => a.localeCompare(b));

//   // return names;

//   // -----------–∑–∞ –¥–æ–ø —á–µ–π–Ω—ñ–Ω–≥–∞------------------

//   return arr
//     .filter(({ price }) => price < 2)
//     .map(({ name }) => name)
//     .sort((a, b) => a.localeCompare(b));
// }
// console.log(getProducts(products));

// -----------------------------------------------------------

// // Task-7 HARD üòà

// // –Ñ —Ä—è–¥–æ–∫ –≤ —è–∫–æ–º—É –¥–æ–≤—ñ–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª—ñ—Ç–µ—Ä, –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –≤ —Ä—è–¥–∫—É –Ω–µ–º–∞—î –ø—Ä–æ–±—ñ–ª—ñ–≤ —Ç–∞ —Ä–æ–∑–¥—ñ–ª–æ–≤–∏—Ö –∑–Ω–∞–∫—ñ–≤, –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –æ–±'—î–∫—Ç –¥–µ –∫–æ–∂–Ω–∞ –ª—ñ—Ç–µ—Ä–∞ –±—É–¥–µ –∫–ª—é—á–µ–º, –∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–∞–∑—ñ–≤ —è–∫—É –≤–æ–Ω–∞ –¥—É–±–ª—é—î—Ç—å—Å—è –±—É–¥–µ –∑–Ω–∞—á–µ–Ω–Ω—è–º –∫–ª—é—á–∞
// const str = "absdabsrgbadgtdswwbetflg";
// // –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —è–∫–∏–π –æ—á—ñ–∫—É—î–º–æ
// // const obj = {
// //     a: 3,
// //     b: 4,
// //     s: 3,
// //     // ...
// // }

// const obj = str.split("").reduce((acc, item) => {
//   if (acc.hasOwnProperty(item)) {
//     // item in acc
//     acc[item] += 1;
//   } else {
//     acc[item] = 1;
//   }
//   return acc;
// }, {});

// console.log(obj);
