// // // Task - 1
// // // –°—Ç–≤–æ—Ä–∏ —Å—Ç—Ä—ñ–ª–æ—á–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é logItems(), —è–∫–∞ –≤–∏–≤–æ–¥–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤–∞, –∑—Ä–æ–±–∏ –ø–µ—Ä–µ–±—ñ—Ä –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É forEach().

// const logItems = (arr) =>
//   arr.forEach((elem, idx) => console.log(`${idx + 1} - ${elem}`));

// logItems(["Mango", "Poly", "Ajax"]);
// logItems(["üçé", "üçá", "üçë", "üçå", "üçã"]);

// // // Task - 2
// // // –ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:
// // // createProduct(obj, callback) - –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É –±–µ–∑ id, –∞ —Ç–∞–∫–æ–∂ –∫–æ–ª–ª–±–µ–∫. –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É, –¥–æ–¥–∞—é—á–∏ –π–æ–º—É —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å id —Ç–∞ –≤–∏–∫–ª–∏–∫–∞—î –∫–æ–ª–ª–±–µ–∫ –ø–µ—Ä–µ–¥–∞—é—á–∏ –π–æ–º—É —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –æ–±'—î–∫—Ç.
// // // logProduct(product) - –∫–æ–ª–±–±–µ–∫ –ø—Ä–∏–π–º–∞—é—á–∏–π –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—É—é—á–∏–π –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å
// // // logTotalPrice(product) - –∫–æ–ª–±–±–µ–∫, —â–æ –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—ñ—é—î –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –≤ –∫–æ–Ω—Å–æ–ª—å

// function createProduct(obj, callback) {
//   const product = {
//     id: Date.now(),
//     ...obj,
//   };
//   callback(product);
// }

// function logProduct(product) {
//   console.log(`Product`, product);
// }

// function logTotalPrice({ quantity, price }) {
//   console.log(`Product total price ${price * quantity}`);
// }

// createProduct(
//   { name: "üçé", price: 30, quantity: 3 },
//   logProduct,
//   logTotalPrice,
// );

// createProduct(
//   { name: "üçã", price: 20, quantity: 5 },
//   logProduct,
//   logTotalPrice,
// );

// //  Task - 3
// // –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é —è–∫–∞ –±—É–¥–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∏.
// // 1 - –º–∞—Å–∏–≤ —á–∏—Å–µ–ª.
// // 2 - —Ñ—É–Ω–∫—Ü—ñ—é —è–∫–∞ –º–∞—î –æ–ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É.
// // –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç —è–∫–æ–≥–æ —î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó

// // function each(arr, action) {
// //   const items = [];
// //   arr.forEach((elem) => {
// //     const result = action(elem);
// //     items.push(result);
// //   });
// //   return items;
// // }

// // -------–∫–æ—Ä–æ—Ç—à–∏–π –∑–∞–ø–∏—Å

// function each(arr, action) {
//   const items = [];
//   arr.forEach((elem) => items.push(action(elem)));
//   return items;
// }

// console.log(each([64, 49, 36, 25, 16], (value) => value * 2));

// console.log(each([64, 49, 36, 25, 16], (value) => value - 10));

// console.log(each([64, 49, 36, 25, 16], (value) => Math.ceil(value)));

// console.log(each([64, 49, 36, 25, 16], (value) => Math.floor(value)));

// -------------------

// // // Task-4
// // // –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é getProductDetails, —è–∫–∞ –ø—Ä–∏–π–º–∞—î —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä—É productId —Ç–∞ –¥–≤—ñ –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—ó successCallback —Ç–∞ errorCallback. –§—É–Ω–∫—Ü—ñ—è getProductDetails –ø–æ–≤–∏–Ω–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ –ø—Ä–æ –≤–∫–∞–∑–∞–Ω–∏–π —Ç–æ–≤–∞—Ä —Ç–∞ –ø–µ—Ä–µ–¥–∞—Ç–∏ —ó—Ö —É successCallback.  –£ –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏, –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è errorCallback —ñ –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É.

// const products = [
//   {
//     id: 1,
//     name: "–¢–µ–ª–µ—Ñ–æ–Ω",
//     price: 10000,
//     description: "–°–º–∞—Ä—Ç—Ñ–æ–Ω –∑ –≤–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–∏–º –¥–∏—Å–ø–ª–µ—î–º —Ç–∞ –ø–æ—Ç—É–∂–Ω–∏–º –ø—Ä–æ—Ü–µ—Å–æ—Ä–æ–º.",
//   },
//   {
//     id: 2,
//     name: "–ù–æ—É—Ç–±—É–∫",
//     price: 25000,
//     description: "–õ–µ–≥–∫–∏–π —Ç–∞ –ø–æ—Ç—É–∂–Ω–∏–π –Ω–æ—É—Ç–±—É–∫ –¥–ª—è —Ä–æ–±–æ—Ç–∏ —Ç–∞ —Ä–æ–∑–≤–∞–≥.",
//   },
//   {
//     id: 3,
//     name: "–ü–ª–∞–Ω—à–µ—Ç",
//     price: 8000,
//     description: "–ö–æ–º–ø–∞–∫—Ç–Ω–∏–π –ø–ª–∞–Ω—à–µ—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∫–æ–Ω—Ç–µ–Ω—Ç—É.",
//   },
// ];

// function getProductDetails(id, success, error) {
//   for (const product of products) {
//     if (product.id === id) {
//       success(product);
//       return;
//     }
//   }
//   error();
// }

// getProductDetails(1, handleSuccess, handleError);
// getProductDetails(11, handleSuccess, handleError);

// function handleSuccess(message) {
//   console.log(`‚úÖ Success!`, message);
// }

// function handleError(productId) {
//   console.log(`‚ùå Error! Product not found`);
// }

// ------------------------------------------------------------------------

// // Task-1
// // –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –º–µ—Ç–æ–¥ map, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤, –≤ —è–∫–æ–º—É –±—É–¥–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª –∫–æ–∂–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞.

// const students = [
//   { name: "John", grades: [80, 85, 90] },
//   { name: "Alice", grades: [90, 95, 92] },
//   { name: "Bob", grades: [70, 80, 75] },
//   { name: "Emily", grades: [95, 92, 88] },
//   { name: "David", grades: [85, 88, 90] },
// ];

// function getAverage(arr) {
//   return arr.map(({ name, grades }) => {
//     const total = grades.reduce((acc, item) => acc + item, 0);
//     const obj = {
//       name,
//       average: Math.round(total / grades.length),
//     };
//     return obj;
//   });
// }
// console.log(getAverage(students));

// // // Task-2
// // // –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –º–µ—Ç–æ–¥ filter, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, –≤ —è–∫–æ–º—É –±—É–¥—É—Ç—å —Ç—ñ–ª—å–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∏ —è–∫—ñ —Å—Ç–∞—Ä—à–µ 20 —Ä–æ–∫—ñ–≤

// const students = [
//   { name: "John", age: 20, gpa: 3.8 },
//   { name: "Alice", age: 21, gpa: 3.2 },
//   { name: "Bob", age: 19, gpa: 3.5 },
//   { name: "Emily", age: 22, gpa: 3.9 },
//   { name: "David", age: 20, gpa: 3.7 },
// ];

// // function getAdults(arr) {
// //   return arr.filter((item) => item.age > 20);
// // }

// // console.log(getAdults(students));

// // -------------–∑ –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü—ñ—î—é-----------------------

// function getAdults(arr) {
//   return arr.filter(({ age }) => age > 20);
// }

// console.log(getAdults(students));

// ------------------------------------------------------

// // Task-3
// // –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –º–µ—Ç–æ–¥ find, —â–æ–± –∑–Ω–∞–π—Ç–∏ –∫–Ω–∏–∂–∫—É –∑–∞ —ó—ó –Ω–∞–∑–≤–æ—é (title)

// const books = [
//   {
//     title: "JavaScript: The Good Parts",
//     author: "Douglas Crockford",
//     year: 2008,
//   },
//   {
//     title: "Clean Code: A Handbook of Agile Software Craftsmanship",
//     author: "Robert C. Martin",
//     year: 2008,
//   },
//   {
//     title: "The Pragmatic Programmer: Your Journey to Mastery",
//     author: "Andrew Hunt, David Thomas",
//     year: 1999,
//   },
//   {
//     title: "Design Patterns: Elements of Reusable Object-Oriented Software",
//     author: "Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides",
//     year: 1994,
//   },
//   {
//     title: "Refactoring: Improving the Design of Existing Code",
//     author: "Martin Fowler",
//     year: 1999,
//   },
// ];

// function getBook(arr, title) {
//   return arr.find(({ title: bookTitle }) => bookTitle === title) || "Not found";
// }

// console.log(
//   getBook(
//     books,
//     "Design Patterns: Elements of Reusable Object-Oriented Software",
//   ),
// );
// console.log(getBook(books, "Design"));

// --------------------------------------------------------

// // // Task-4
// // // –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –º–µ—Ç–æ–¥ reduce, —â–æ–± –æ–±—á–∏—Å–ª–∏—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å –≤—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤ —É –º–∞—Å–∏–≤—ñ, —è–∫–∞ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î—Ç—å—Å—è —è–∫ –¥–æ–±—É—Ç–æ–∫ —Ü—ñ–Ω–∏ —Ç–æ–≤–∞—Ä—É –Ω–∞ –π–æ–≥–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å, –∞ –ø–æ—Ç—ñ–º —Å—É–º—É—î—Ç—å—Å—è –∑ —ñ–Ω—à–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏. –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –∑–∞–≥–∞–ª—å–Ω–æ—é –≤–∞—Ä—Ç—ñ—Å—Ç—é –≤—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤.

// const products = [
//   { id: 1, name: "T-shirt", price: 20, quantity: 3 },
//   { id: 2, name: "Jeans", price: 50, quantity: 2 },
//   { id: 3, name: "Sneakers", price: 80, quantity: 1 },
//   { id: 4, name: "Hat", price: 15, quantity: 4 },
//   { id: 5, name: "Socks", price: 5, quantity: 6 },
// ];

// function getTotal(arr) {
//   return arr.reduce((acc, { price, quantity }) => (acc += price * quantity), 0);
// }

// console.log(getTotal(products));

// // // Task-5
// // // –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –º–µ—Ç–æ–¥ sort, —â–æ–± –≤—ñ–¥—Å–æ—Ä—Ç—É–≤–∞—Ç–∏ –∫–Ω–∏–∂–∫–∏ –∑–∞ —Ä–æ–∫–æ–º –≤–∏–¥–∞–Ω–Ω—è —É —Å–ø–∞–¥–∞—é—á–æ–º—É –ø–æ—Ä—è–¥–∫—É. –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–º –º–∞—Å–∏–≤–æ–º –∫–Ω–∏–∂–æ–∫ –∑–∞ —Ä–æ–∫–æ–º –≤–∏–¥–∞–Ω–Ω—è.

// const books = [
//   {
//     title: "JavaScript: The Good Parts",
//     author: "Douglas Crockford",
//     year: 2008,
//   },
//   {
//     title: "Clean Code: A Handbook of Agile Software Craftsmanship",
//     author: "Robert C. Martin",
//     year: 2008,
//   },
//   {
//     title: "The Pragmatic Programmer: Your Journey to Mastery",
//     author: "Andrew Hunt, David Thomas",
//     year: 1999,
//   },
//   {
//     title: "Design Patterns: Elements of Reusable Object-Oriented Software",
//     author: "Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides",
//     year: 1994,
//   },
//   {
//     title: "Refactoring: Improving the Design of Existing Code",
//     author: "Martin Fowler",
//     year: 1999,
//   },
// ];

// function getSortedBooks(arr) {
//   return [...arr].sort((a, b) => b.year - a.year);
// }

// console.log(getSortedBooks(books));

// // Task-6
// // –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø–µ—Ä–µ–±–∏—Ä–∞—é—á—ñ –º–µ—Ç–æ–¥–∏ –º–∞—Å–∏–≤—É map —Ç–∞ filter, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–∞—Å–∏–≤ –Ω–∞–∑–≤ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤, —Ü—ñ–Ω–∞ —è–∫–∏—Ö –º–µ–Ω—à–µ 2 –¥–æ–ª–∞—Ä—ñ–≤ —Ç–∞ –≤—ñ–¥—Å–æ—Ä—Ç—É–π —ó—Ö –∑–∞ –∞–ª—Ñ–∞–≤—ñ—Ç–Ω–∏–º –ø–æ—Ä—è–¥–∫–æ–º.

// const products = [
//   { id: 2, name: "Banana", price: 0.99 },
//   { id: 1, name: "Apple", price: 1.99 },
//   { id: 3, name: "Orange", price: 2.49 },
//   { id: 4, name: "Grapes", price: 3.99 },
// ];

// function getNames(arr) {
//   return arr
//     .filter(({ price }) => price < 2)
//     .map(({ name }) => name)
//     .sort((a, b) => a.localeCompare(b));
// }

// console.log(getNames(products));

// // Task-7 HARD üòà

// // // –Ñ —Ä—è–¥–æ–∫ –≤ —è–∫–æ–º—É –¥–æ–≤—ñ–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª—ñ—Ç–µ—Ä, –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –≤ —Ä—è–¥–∫—É –Ω–µ–º–∞—î –ø—Ä–æ–±—ñ–ª—ñ–≤ —Ç–∞ —Ä–æ–∑–¥—ñ–ª–æ–≤–∏—Ö –∑–Ω–∞–∫—ñ–≤, –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –æ–±'—î–∫—Ç –¥–µ –∫–æ–∂–Ω–∞ –ª—ñ—Ç–µ—Ä–∞ –±—É–¥–µ –∫–ª—é—á–µ–º, –∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–∞–∑—ñ–≤ —è–∫—É –≤–æ–Ω–∞ –¥—É–±–ª—é—î—Ç—å—Å—è –±—É–¥–µ –∑–Ω–∞—á–µ–Ω–Ω—è–º –∫–ª—é—á–∞
// const str = "absdabsrgbadgtdswwbetflg";
// // // –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —è–∫–∏–π –æ—á—ñ–∫—É—î–º–æ
// // // const obj = {
// // //     a: 3,
// // //     b: 4,
// // //     s: 3,
// // //     // ...
// // // }

// const obj = str.split("").reduce((acc, item) => {
//   if (acc.hasOwnProperty(item)) {
//     acc[item] += 1;
//   } else {
//     acc[item] = 1;
//   }
//   return acc;
// }, {});

// console.log(obj);

// --------------------------------------------------------------------------------
// // Task - 1
// // –ù–∞—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞–ø–∏—Å–∞—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–Ω–µ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è –¥–ª—è –∞–≤—Ç–æ–º–æ–±—ñ–ª—è, –∞ —Å–∞–º–µ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è –≤ —Å–∏—Å—Ç–µ–º—ñ –∫—Ä—É—ó–∑ –∫–æ–Ω—Ç—Ä–æ–ª—é.

// const car = {
//   brand: "Audi",
//   speed: 0,
//   accelerate() {
//     this.speed += 10;
//     console.log(
//       `–ê–≤—Ç–æ–º–æ–±—ñ–ª—å ${this.brand} –ø—Ä–∏—Å–∫–æ—Ä—é—î—Ç—å—Å—è. –ü–æ—Ç–æ—á–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å ${this.speed}`,
//     );
//   },
//   decrease() {
//     if (this.speed <= 0) {
//       console.log(`–ê–≤—Ç–æ –∑—É–ø–∏–Ω–∏–ª–æ—Å—å`);
//       return;
//     }
//     this.speed -= 10;
//     console.log(
//       `–ê–≤—Ç–æ–º–æ–±—ñ–ª—å ${this.brand} –≥–∞–ª—å–º—É—î. –ü–æ—Ç–æ—á–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å ${this.speed}`,
//     );
//   },
// };

// const car2 = {
//   brand: "BMW",
//   speed: 40,
//   // accelerate: car.accelerate,
// };

// const car3 = {
//   brand: "Volvo",
//   speed: 70,
// };

// const bmw = car.accelerate.bind(car2);
// const volvo = car.accelerate.bind(car3);
// const bmwDecr = car.decrease.bind(car2);
// const volvoDecr = car.decrease.bind(car3);

// // volvo();
// // volvo();
// // volvo();
// // // bmw();
// // // bmw();

// for (let i = 0; i < 8; i += 1) {
//   bmw();
// }
// for (let i = 0; i < 13; i += 1) {
//   bmwDecr();
// }
// for (let i = 0; i < 8; i += 1) {
//   volvo();
// }
// for (let i = 0; i < 16; i += 1) {
//   volvoDecr();
// }

// // Task - 2
// // –ü–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø—Ä–æ–¥–∞–∂—É –≤ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω—ñ.
// // –Ñ –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ —è–∫–æ–º—É –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –º–µ—Ç–æ–¥ discount(–±—É–¥–µ –ø—Ä–∏–π–º–∞—Ç–∏ –∑–Ω–∏–∂–∫—É –∫–ª—ñ—î–Ω—Ç–∞ –≤ %) —è–∫–∏–π –±—É–¥–µ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –∑ –≤—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∑–Ω–∏–∂–∫–∏
// // –Ñ –æ–±'—î–∫—Ç –∫–ª—ñ—î–Ω—Ç–∞ —è–∫–∏–π –º—ñ—Å—Ç–∏—Ç—å —ñ–º'—è —Ç–∞ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—É –∑–Ω–∏–∂–∫—É, –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –º–µ—Ç–æ–¥ purchase, —è–∫–∏–π –±—É–¥–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –º–µ—Ç–æ–¥ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –≤–∞—Ä—Ç–æ—Å—Ç—ñ —Ç–æ–≤–∞—Ä—É —Ç–∞ –ª–æ–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–∫—É–ø–∫—É
// // Alice –ø—Ä–∏–¥–±–∞–ª–∞ —Ç–æ–≤–∞—Ä –∑—ñ –∑–Ω–∏–∂–∫–æ—é –≤ 8%, —Å—É–º–∞ –¥–æ —Å–ø–ª–∞—Ç–∏ 460–≥—Ä–Ω"

// const product = {
//   name: "smartphone",
//   price: 500,
//   discount(percent) {
//     return (this.price * (100 - percent)) / 100;
//   },
// };

// const client = {
//   name: "Alice",
//   discountPercent: 8,
//   purchase() {
//     const price = product.discount(this.discountPercent);
//     console.log(
//       `${this.name} –ø—Ä–∏–¥–±–∞–ª–∞ —Ç–æ–≤–∞—Ä –∑—ñ –∑–Ω–∏–∂–∫–æ—é –≤ ${this.discountPercent}%, —Å—É–º–∞ –¥–æ —Å–ø–ª–∞—Ç–∏ ${price} –≥—Ä–Ω`,
//     );
//   },
// };

// const client2 = {
//   name: "Kate",
//   discountPercent: 4,
// };

// client.purchase.call(client2);
// client.purchase();

// // // Task - 3
// // –ü–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—é —à–≤–∏–¥–∫–æ—Å—Ç—ñ –ø—Ä–æ–∫–∞—Ç–Ω–∏—Ö –∞–≤—Ç–æ.
// // –°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é —è–∫–∞ –±—É–¥–µ –ø—Ä–∏–π–º–∞—Ç–∏ 1 –ø–∞—Ä–∞–º–µ—Ç—Ä (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–∑–≤–æ–ª–µ–Ω—É —à–≤–∏–¥–∫—ñ—Å—Ç—å)
// // —Ç–∞ –≤–∏–≤–æ–¥–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–∏ –º–∏ —Ä—É—Ö–∞—î–º–æ—Å—å –∑ –±–µ–∑–ø–µ—á–Ω–æ—é —à–≤–∏–¥–∫—ñ—Å—Ç—é —á–∏ –ø–µ—Ä–µ–≤–∏—â—É—î–º–æ, —Ñ—É–Ω–∫—Ü—ñ—è –º–∞—î –æ–ø—Ä–∞—Ü—å–æ–≤—É–≤–∞—Ç–∏ –æ–±'—î–∫—Ç –∞–≤—Ç–æ–º–æ–±—ñ–ª—è —è–∫ this

// const tesla = {
//   brand: "Tesla",
//   speed: 70,
// };

// const audi = {
//   brand: "Audi",
//   speed: 120,
// };

// function checkSpeed(maxSpeed) {
//   return this.speed <= maxSpeed
//     ? `–ê–≤—Ç–æ ${this.brand} —Ä—É—Ö–∞—î—Ç—å—Å—è –∑ –±–µ–∑–ø–µ—á–Ω–æ—é —à–≤–∏–¥–∫—ñ—Å—Ç—é üòâ`
//     : `–ê–≤—Ç–æ ${this.brand} –ø–µ—Ä–µ–≤–∏—â–∏–ª–æ –±–µ–∑–ø–µ—á–Ω—É —à–≤–∏–¥–∫—ñ—Å—Ç—å üò®`;
// }

// console.log(checkSpeed.call(tesla, 70));
// console.log(checkSpeed.call(audi, 70));

// Task-4 –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
// –°—Ç–≤–æ—Ä—ñ—Ç—å –æ–±'—î–∫—Ç calculator –∑ —Ç—Ä—å–æ–º–∞ –º–µ—Ç–æ–¥–∞–º–∏:

// read(a, b)- –ø—Ä–∏–π–º–∞—î –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î —ó—Ö —è–∫ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –æ–±'—î–∫—Ç–∞.
// add() - –ø–æ–≤–µ—Ä—Ç–∞—î —Å—É–º—É –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å.
// mult() - –ø–µ—Ä–µ–º–Ω–æ–∂—É—î –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

// const calculator = {
//   read(a = 0, b = 0) {
//     this.a = a;
//     this.b = b;
//   },
//   add() {
//     return (this.a ?? 0) + (this.b ?? 0);
//   },
//   mult() {
//     return (this.a ?? 1) * (this.b ?? 1);
//   },
// };

// calculator.read(4);

// console.log(calculator.add(4, 5));

// console.log(calculator.mult(4, 5));

// ---------------------------------------------------------------------------------------------------------------------

// // // Task-1
// // // –ù–µ–æ–±—Ö—ñ–¥–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞—Å Rectangle, —è–∫–∏–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫. –ö–ª–∞—Å –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ width —Ç–∞ height, –∞ —Ç–∞–∫–æ–∂ –ø—É–±–ª—ñ—á–Ω—ñ –≥–µ—Ç–µ—Ä–∏ —Ç–∞ —Å–µ—Ç–µ—Ä–∏ –¥–ª—è —Ü–∏—Ö –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π. –ì–µ—Ç–µ—Ä–∏ –ø–æ–≤–∏–Ω–Ω—ñ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π, –∞ —Å–µ—Ç–µ—Ä–∏ –ø–æ–≤–∏–Ω–Ω—ñ –¥–æ–∑–≤–æ–ª—è—Ç–∏ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π –∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é.

// class Rectangle {
//   #width;
//   #height;
//   constructor({ width, height }) {
//     this.#width = width;
//     this.#height = height;
//   }
//   getWidth() {
//     return this.#width;
//   }

//   setWidth(newWidth) {
//     if (typeof newWidth === "number" && newWidth > 0) {
//       this.#width = newWidth;
//     } else {
//       console.log(`–®–∏—Ä–∏–Ω–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —á–∏—Å–ª–æ–º –±—ñ–ª—å—à–∏–º –∑–∞ –Ω—É–ª—å`);
//     }
//   }

//   getHeight() {
//     return this.#height;
//   }

//   setHeight(newHeight) {
//     if (typeof newHeight === "number" && newHeight > 0) {
//       this.#height = newHeight;
//     } else {
//       console.log(`–í–∏—Å–æ—Ç–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —á–∏—Å–ª–æ–º –±—ñ–ª—å—à–∏–º –∑–∞ –Ω—É–ª—å`);
//     }
//   }
// }

// const item = new Rectangle({
//   width: 7,
//   height: 5,
// });

// console.log(item.getWidth());
// console.log(item.getHeight());

// item.setWidth(0);
// item.setWidth("troll");
// item.setWidth(10);

// item.setHeight(-1);
// item.setHeight("qwe");
// item.setHeight(13);

// console.log(item.getWidth());
// console.log(item.getHeight());

// ------------------------------------------------------------------------

// // // Task-2
// // // –†–µ–∞–ª—ñ–∑—É–π—Ç–µ –∫–ª–∞—Å Student, —è–∫–∏–π —É—Å–ø–∞–¥–∫–æ–≤—É–≤–∞—Ç–∏–º–µ—Ç—å—Å—è –≤—ñ–¥ –∫–ª–∞—Å—É User. –¶–µ–π –∫–ª–∞—Å –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ —Ç–∞–∫—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ:
// // // name –ø—Ä–∏–≤–∞—Ç–Ω–∞ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å (—ñ–º'—è, —É—Å–ø–∞–¥–∫–æ–≤—É—î—Ç—å—Å—è –≤—ñ–¥ User),
// // // surname –ø—Ä–∏–≤–∞—Ç–Ω–∞ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å (–ø—Ä—ñ–∑–≤–∏—â–µ, —É—Å–ø–∞–¥–∫–æ–≤—É—î—Ç—å—Å—è –≤—ñ–¥ User),
// // // year (—Ä—ñ–∫ –≤—Å—Ç—É–ø—É –¥–æ –≤—É–∑—É).

// // // –ö–ª–∞—Å –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ –º–µ—Ç–æ–¥ getFullName() (—É—Å–ø–∞–¥–∫–æ–≤—É—î—Ç—å—Å—è –≤—ñ–¥ User), –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —è–∫–æ–≥–æ –º–æ–∂–Ω–∞ –≤–∏–≤–µ—Å—Ç–∏ –æ–¥–Ω–æ—á–∞—Å–Ω–æ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ —Å—Ç—É–¥–µ–Ω—Ç–∞.
// // // –¢–∞–∫–æ–∂ –∫–ª–∞—Å –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ –º–µ—Ç–æ–¥ getCourse(), —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç–∏–º–µ –ø–æ—Ç–æ—á–Ω–∏–π –∫—É—Ä—Å —Å—Ç—É–¥–µ–Ω—Ç–∞ (–≤—ñ–¥ 1 –¥–æ 5, —è–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä–µ–≤–∏—â—É—î 5  –∫—É—Ä—Å –≤–∏–≤–æ–¥–∏—Ç–∏ —â–æ —Å—Ç—É–¥–µ–Ω—Ç —è–≤–ª—è—î—Ç—Å—å—è –≤–∏–ø—É—Å–∫–Ω–∏–∫–æ–º).
// // // –ö—É—Ä—Å –æ–±—á–∏—Å–ª—é—î—Ç—å—Å—è —Ç–∞–∫: –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä–æ–∫—É –≤—ñ–¥–Ω—è—Ç–∏ —Ä—ñ–∫ –≤—Å—Ç—É–ø—É –¥–æ –≤—É–∑—É. –ü–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–∫ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ (—á–∏—Ç–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é!!!).
// // // –ü—Ä–∏–∫–ª–∞–¥ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –µ–∫–∑–µ–º–ø–ª—è—Ä—É –∫–ª–∞—Å–∞:
// // // const student = new Student('–ü–µ—Ç—Ä–∏–∫', '–ü—è—Ç–æ—á–∫–∏–Ω', 2019);
// class User {
//   #name;
//   #surname;
//   constructor(name, surname) {
//     this.#name = name;
//     this.#surname = surname;
//   }
//   getFullName() {
//     return `${this.#name} ${this.#surname}`;
//   }
// }

// class Student extends User {
//   constructor(name, surname, year) {
//     super(name, surname);

//     this.year = year;
//   }

//   getCourse() {
//     const today = new Date();
//     const currentYear = today.getFullYear();
//     const diff = currentYear - this.year;

//     if (currentYear < this.year) {
//       return `"—Å—Ç—É–¥–µ–Ω—Ç" —â–µ –≤—á–∏—Ç—å—Å—è –≤ —à–∫–æ–ª—ñ üòÇ`;
//     }

//     if (diff > 5) {
//       return `"—Å—Ç—É–¥–µ–Ω—Ç" —è–≤–ª—è—î—Ç—å—Å—è –≤–∏–ø—É—Å–∫–Ω–∏–∫–æ–º üòÇ`;
//     }
//     return `${diff} –∫—É—Ä—Å`;
//   }
// }

// const student = new Student("–ü–µ—Ç—Ä–∏–∫", "–ü—è—Ç–æ—á–∫–∏–Ω", 2019);

// console.log(student.getFullName());
// console.log(student.getCourse());

// ----------------------------------------------------------------------------------

// // // Task-3
// // // –ù–µ–æ–±—Ö—ñ–¥–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞—Å BankAccount, —è–∫–∏–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π —Ä–∞—Ö—É–Ω–æ–∫. –ö–ª–∞—Å –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ –ø—Ä–∏–≤–∞—Ç–Ω—É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å _balance, —è–∫–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î –±–∞–ª–∞–Ω—Å —Ä–∞—Ö—É–Ω–∫—É. –ö–ª–∞—Å –ø–æ–≤–∏–Ω–µ–Ω —Ç–∞–∫–æ–∂ –º–∞—Ç–∏ –ø—É–±–ª—ñ—á–Ω—ñ –º–µ—Ç–æ–¥–∏ deposit —Ç–∞ withdraw, —è–∫—ñ –¥–æ–∑–≤–æ–ª—è—é—Ç—å –∑–¥—ñ–π—Å–Ω—é–≤–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ –¥–µ–ø–æ–∑–∏—Ç–æ–º —Ç–∞ –∑–Ω—è—Ç—Ç—è–º –∫–æ—à—Ç—ñ–≤ –∑ —Ä–∞—Ö—É–Ω–∫—É. –ü—Ä–∏ —Ü—å–æ–º—É _balance –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –≤ –º–µ–∂–∞—Ö –∫–ª–∞—Å—É BankAccount —Ç–∞ –π–æ–≥–æ –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –º–µ—Ç–æ–¥—ñ–≤.

// class BankAccount {
//   #balance;

//   constructor() {
//     this.#balance = 0;
//   }

//   deposit(amount) {
//     if (amount > 0) {
//       this.#changeBalance(amount);
//       console.log(`–∑–¥—ñ–π—Å–Ω–µ–Ω–æ –¥–µ–ø–æ–∑–∏—Ç –Ω–∞ —Å—É–º—É ${amount}`);
//       return;
//     }

//     console.log(`–°—É–º–∞ –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–∞ –∑–∞ 0`);
//   }

//   withdraw(amount) {
//     if (amount <= 0) {
//       console.log(`–°—É–º–∞ –∑–Ω—è—Ç—Ç—è –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–æ—é –∑–∞ 0`);
//     } else if (amount > this.#balance) {
//       console.log(`Nice try üòÇ`);
//     } else {
//       this.#changeBalance(-amount);
//       console.log(`–ó–Ω—è—Ç–æ ${amount}`);
//     }
//   }

//   #changeBalance(amount) {
//     this.#balance += amount;
//   }
// }

// const instance = new BankAccount();
// instance.deposit(0);
// instance.deposit(-1);
// instance.deposit(1200);
// instance.withdraw(0);
// instance.withdraw(-1);
// instance.withdraw(1400);
// instance.withdraw(1000);

// console.log(instance);

// -----------------------------------------------------

// // // Task-4
// // // –ù–µ–æ–±—Ö—ñ–¥–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞—Å Hero, —è–∫–∏–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î –≥–µ—Ä–æ—è –∑ –≥—Ä–∏. –ö–ª–∞—Å –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ –ø—É–±–ª—ñ—á–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ name, level —Ç–∞ health, –∞ —Ç–∞–∫–æ–∂ –º–µ—Ç–æ–¥–∏ attack —Ç–∞ heal, —â–æ –¥–æ–∑–≤–æ–ª—è—é—Ç—å –≥–µ—Ä–æ—é –∞—Ç–∞–∫—É–≤–∞—Ç–∏ —Ç–∞ –≤—ñ–¥–Ω–æ–≤–ª—é–≤–∞—Ç–∏ –∑–¥–æ—Ä–æ–≤'—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ.
// // // –¢–∞–∫–æ–∂ —Å—Ç–≤–æ—Ä–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –¥–ª—è –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö –≥–µ—Ä–æ—ó–≤

// // // –í–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å name –º–∞—î –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —ñ–º'—è –≥–µ—Ä–æ—è.
// // // –í–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å level –º–∞—î –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —Ä—ñ–≤–µ–Ω—å –≥–µ—Ä–æ—è.
// // // –í–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å health –º–∞—î –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –∑–¥–æ—Ä–æ–≤'—è –≥–µ—Ä–æ—è.
// // // –ú–µ—Ç–æ–¥ attack –Ω–∞–Ω–æ—Å–∏—Ç—å –ø–æ—à–∫–æ–¥–∂–µ–Ω–Ω—è –≤ —Ä–æ–∑–º—ñ—Ä 10 –æ–¥–∏–Ω–∏—Ü—å. –ú–µ—Ç–æ–¥ heal –¥–æ–¥–∞—î –¥–æ –∑–¥–æ—Ä–æ–≤'—è –≥–µ—Ä–æ—è 10 –æ–¥–∏–Ω–∏—Ü—å.

// class Hero {
//   static counter = 0;
//   static addHero() {
//     this.counter += 1;
//     console.log(`–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥–µ—Ä–æ—ó–≤ ${this.counter}`);
//   }
//   constructor(name) {
//     this.name = name;
//     this.level = 1;
//     this.health = 200;
//     Hero.addHero();
//   }

//   attack() {
//     console.log(`–ì–µ—Ä–æ–π –Ω–∞–Ω—ñ—Å 10 –æ–¥–∏–Ω–∏—Ü—å —É—Ä–æ–Ω—É`);
//   }

//   heal() {
//     this.health += 10;
//   }
// }

// const bloodseker = new Hero("Bloodseker");
// const bloodseker2 = new Hero("Bloodseker");
// const bloodseker3 = new Hero("Bloodseker");
// const bloodseker4 = new Hero("Bloodseker");
// const bloodseker5 = new Hero("Bloodseker");
// const bloodseker6 = new Hero("Bloodseker");
// const bloodseker7 = new Hero("Bloodseker");
// const bloodseker8 = new Hero("Bloodseker");
// console.log(bloodseker);
// console.log(bloodseker.heal());

// ============CODEWARS========== –ü–æ—à—É–∫ –¥–≤—É—Ö –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏—Ö —á–∏—Å–µ–ª —Ç–∞ –≤–∏–≤–µ—Å—Ç–∏ —Å—É–º—É —ó—Ö==================

// function sumTwoSmallestNumbers(numbers) {
//   const min = Math.min(...numbers);

//   const newArr = numbers.filter((elem) => elem > min);

//   const secondMin = Math.min(...newArr);
//   const sum = min + secondMin;
//   return sum;
// }
// console.log(
//   sumTwoSmallestNumbers([5, 1, 12, 2, 22, 45, 47, 45, 41, 41, 42, 46, 48]),
// );

// =======================CODEWARS===================

// function solution(string) {
//   string = string.replace(/([A-Z])/g, " $1");
//   return string;
// }

// console.log(solution("helloWorldCrowDigPig"));

// -----------------else variant-------------------------

// function solution(string) {
//   const result = [];
//   const strArr = string.split("");
//   console.log(strArr);
//   const alphabet = "QWERTYUIOPLKJHGFDSAZXCVBNM";
//   for (let i = 0; i < strArr.length; i += 1) {
//     if (alphabet.includes(strArr[i])) {
//       strArr[i] = " " + strArr[i];
//       result.push(strArr[i]);
//     } else {
//       result.push(strArr[i]);
//     }
//   }
//   return result.join("");
// }

// console.log(solution("helloWorldCrowDigPig"));
